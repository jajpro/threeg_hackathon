/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-07-01 17:03:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import org.json.simple.*;

public final class getNFC_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("org.json.simple");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\t\t\t\r\n");


request.setCharacterEncoding("utf-8");

//String nfc_id = request.getParameter("nfc_id");
String nfc_id = "2222";


int numOfData = 0;

int receipt_id = 0;
int store_id =0;
String card_company = null;
int card_number =0;
String purchase_date = null;
String store_name = null;
String store_address = null;

try {
	
	PreparedStatement pstmt = null;
	PreparedStatement pstmt2 = null;
	PreparedStatement pstmt3 = null;
	ResultSet rs = null;
	ResultSet rs2 = null;
	ResultSet rs3 = null;
	
	Class.forName("com.mysql.jdbc.Driver");  
	String DB_URL ="jdbc:mysql://localhost/jaj7884";

	Connection con =  DriverManager.getConnection(DB_URL, "jaj7884", "wkddj1960!");
	
	String sql = "SELECT COUNT(nfc_id) FROM receipt_user WHERE nfc_id=?";
	
	PreparedStatement ps = con.prepareStatement(sql);
	ps.setString(1, nfc_id);
	ResultSet result = ps.executeQuery();
	if(result.next()) {
		numOfData = result.getInt(1);
	}
	result.close();
	ps.close();
	
	
	sql = "SELECT *FROM receipt_user WHERE nfc_id=?";
	
	pstmt = con.prepareStatement(sql);
	
	pstmt.setString(1, nfc_id);

	rs = pstmt.executeQuery();
	
	int[] rid = new int[numOfData];
	int[] sid = new int[numOfData];
	String[] ccompany = new String[numOfData];
	int[] cnumber = new int[numOfData];
	String[] pdate = new String[numOfData];
	String[] sname = new String[numOfData];
	String[] saddress = new String[numOfData];
	
	int count = 0;
	while(rs.next()) {
	receipt_id = rs.getInt("receipt_id");
	rid[count] = rs.getInt("receipt_id");
	count++;
	}
	
	
	sql = "SELECT *FROM receipt WHERE receipt_id=?";
	
	for(int i=0;i<numOfData;i++) {
		
		
		pstmt2 = con.prepareStatement(sql);
		pstmt2.setInt(1, rid[i]);
		rs2 = pstmt2.executeQuery();
		
		if(rs2.next()){
		
		sid[i] = rs2.getInt("store_id");
		ccompany[i] = rs2.getString("card_company");
		cnumber[i] = rs2.getInt("card_number");
		pdate[i] = rs2.getString("purchase_date");
		
		}
		
		pstmt2.clearParameters();
		
	}
	
	sql = "SELECT *FROM store WHERE store_id=?";
		
	for(int i=0;i<numOfData;i++) {
		
		pstmt3 = con.prepareStatement(sql);
		pstmt3.setInt(1, sid[i]);
		rs3 = pstmt3.executeQuery();
		
		if(rs3.next()) {
		
		sname[i] = rs3.getString("store_name");
		saddress[i] = rs3.getString("store_address");
		
		}
		pstmt3.clearParameters();
		
	}
	
	

      out.write("\r\n");
      out.write("\r\n");


	JSONObject jsonMain = new JSONObject();
	JSONArray jArray = new JSONArray();
	
	JSONObject jObject = new JSONObject();

	for(int i=0;i<numOfData;i++) {
	
	jObject.put("receipt_id",rid[i]);
	jObject.put("store_name",sname[i]);
	jObject.put("store_addr",saddress[i]);
	jObject.put("card_number",cnumber[i]);
	jObject.put("card_company",ccompany[i]);
	jObject.put("purchase_date",pdate[i]);

	jArray.add(0,jObject);
	
	jsonMain.put("List",jArray.get(i));

	
	out.println(jsonMain.toJSONString());
	
	}
	
	rs.close();
	pstmt.close();
	rs2.close();
	pstmt2.close();
	rs3.close();
	pstmt3.close();		
	con.close();
	
	
}catch(SQLException e) {
	out.print(e);
	return;
}



      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
